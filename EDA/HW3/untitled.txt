#include <iostream>
#include <iomanip>
#include <initializer_list>
#include <ostream>

using namespace std;

struct Node {
    int data;
    Node *pChild[2];
    int color; // #0 for black #1 for red #default 0
    Node():data(NULL){};
    Node(int x):data(x) {
        pChild[0] = pChild[1] = nullptr;
        color=0;
    }
};

class BST {
protected:
    Node *pRoot;

public:

    BST(initializer_list<int> list):pRoot(nullptr){
        for(auto elem : list){
            insert(elem);
        }
    }
    
    Node** findP(int x) {
        Node** p=&pRoot;
        if((*p)->data==x) return nullptr;
        while(*p){
            if((*p)->pChild[0]->data==x||(*p)->pChild[1]->data==x){
                return p;
            }
            p=&((*p)->pChild[(*p)->data<x]);
        }
        return p;
    }
    
    Node** findB(int x) {
    	Node** filho=&pRoot;
    	if((*filho)->data==x) return filho;
    	Node** pai=findP(x);
    	filho=&((*pai)->pChild[(*pai)->pChild[0]->data==x]);
    	if(filho) return filho;
    	return filho=nullptr;
	}
    
    bool find(int x) {
        Node **p;
        return find(x, p);
    }

    void insert(int x) {
        Node **p;
        if (!find(x, p)) {
            *p = new Node(x);
        }
    }
    void remove(int x) {
        Node **p;
        if(find(x, p))
            remove(*p);
    }

    void print() {
        print(pRoot);
        cout << endl;
    }

private:
    bool find(int x, Node **&p) {
        p = &pRoot;
        while(*p) {
            if ((*p)->data==x) return true;
            p = &((*p)->pChild[(*p)->data < x]);
        }
        return false;
    }

    void remove(Node *&p) {
        if (!p->pChild[0] || !p->pChild[1])
            p = p->pChild[p->pChild[1]!=nullptr];
        else {
            Node **succesor = &(p->pChild[1]);
            find_min(succesor);
            p->data = (*succesor)->data;
            remove(*succesor);
        }
    }

    void find_min(Node **&p) {
        while((*p)->pChild[0]){
            p = &((*p)->pChild[0]);
        }
    }

    void print(Node *p, int indent=0) {
        if (p) {
            print(p->pChild[1], indent+6);
            cout << setw(indent) << ' ';
            cout<< p->data << '-' << p->color <<endl;
            print(p->pChild[0], indent+6);
        }
    }
};

int main() {
    BST bst({6,4,8,2,5,1,3,9,7,10});
    bst.print();

    cout << "-----------------\n";
    Node** p=bst.findB(10);
    cout << (*p)->data;
}